# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

. /usr/share/git-core/contrib/completion/git-prompt.sh &> /dev/null

# LANGUAGE-SPECIFIC --------------------------------------------------

# Python
export WORKON_HOME=~/.virtualenvs
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true

# JS / node
export NPM_PACKAGES="$HOME/.npm-packages"
export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
export PATH="$PATH:$NPM_PACKAGES/bin"

# --------------------------------------------------------------------

# SHELL SETTINGS -----------------------------------------------------

export PATH="$PATH:/opt/blackbox/bin:/opt/spark/bin:$HOME/.jenv/bin:/opt/mc/bin:/opt/coursier/bin:$HOME/.local/share/coursier/bin:$HOME/.local/bin"

# Extra PS1 marker if in a nix shell, for clarity
# Currently disabled, just add a call at the start of PS1 to re-enable
_nix_marker() {
  # A shell emoji, with markers to allocate only the correct 2-char width
  local _marker=$'\001\xf0\x9f\002\x90\x9a'
  if [[ "$_USE_NIX_MARKER" == 1 ]]; then
    echo -n "$_marker"
    return
  fi

  if echo "$PATH" | grep -F '/nix/store' &> /dev/null; then
    export _USE_NIX_MARKER=1
    echo -n "$_marker"
  fi
}

export PS1='${PS1_MARKER}'"\W \[$(tput setaf 1)\]\$(__git_ps1 '(%s) ')\[$(tput setaf 3)\]\[$(tput bold)\]\\$ \[$(tput sgr0)\]"

export TERM=xterm-256color

# Elephant mode
export HISTSIZE=100000
export HISTFILESIZE=
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"


# Ensure symlinked dirs expand with trailing slash in autocomplete
bind 'set mark-symlinked-directories on'

# --------------------------------------------------------------------

# TOOL SETTINGS ------------------------------------------------------

# Tell fzf to use ag so that it ignores .gitignore stuff
export FZF_DEFAULT_COMMAND='ag --hidden -g ""'

# Always use gvim
alias vim=gvim

complete -C /usr/bin/terraform terraform

export NIX_SHELL_PRESERVE_PROMPT=1

# Make sure colour grep is used
unalias grep &> /dev/null
alias grep='grep --color=auto'

# This suppresses spurious warnings from gtk applications about failure to register
# with an accessibility bus
export NO_AT_BRIDGE=1

export DOCKER_URL='unix:///var/run/docker.sock'

# Initialise jenv
eval "$(jenv init -)"

# TMUX ----------------------------------------------------------------

# 256col tmux
alias tmux='tmux -2'

# Wrap a command in a tmux session if not already in one
_in_tmux() {
  if [[ "$TMUX" != '' ]]; then
    $(tmux $*)
    return
  fi

  SESSION_NAME=auto-tmux-$RANDOM
  tmux new -d -s $SESSION_NAME -c $(pwd)
  $(tmux $* -t $SESSION_NAME )
  tmux attach -t $SESSION_NAME
}

alias vsplit='_in_tmux split -h'
alias hsplit='_in_tmux split -v'
# ---------------------------------------------------------------------

# COMMANDS AND ALIASES ------------------------------------------------

# Amm options to work with different libraries
amm() {
  /opt/ammonite/bin/amm "$@"
}
amm-cats() {
  amm -p "$HOME/.ammonite/predef_cats.sc" "$@"
}
amm-zio() {
  amm -p "$HOME/.ammonite/predef_zio.sc" "$@"
}
amm-spark() {
  amm -p "$HOME/.ammonite/predef_spark.sc" --class-based "$@"
}

###

# Cardinal: js syntax highlighting
cdl() {
  $HOME/scripts/format/cdl "$@"
}

# Shortcut to quickly recycle a docker compose container
dcr() {
  local SERVICE="$1"
  docker compose stop "$SERVICE" && docker compose rm -f "$SERVICE" && docker compose up -d "$SERVICE"
}

# Script to wrap docker ps and give it colour / better readability
dps() {
  $HOME/scripts/dps "$@"
}

# Docked sbt
dsbt() {
  /opt/docker-sbt/wrapper.sh "$@"
}


# Kitty shell trick to display image in shell
icat() {
  kitty +kitten icat "$@"
}

# Open current ticket in jira; requires some config and a ticket number
# (either argument, or current branch name)
jira() {
  if [[ "$JIRA_SUBDOMAIN" == '' ]]; then
    echo 'Set the $JIRA_SUBDOMAIN in ~/.work' >&2
    return 1
  fi

  CARD="${1:-$(git rev-parse --abbrev-ref HEAD)}"
  if ! echo "$CARD" | grep -E '^[A-Z]{1,6}\-[0-9]{1,8}$' &> /dev/null; then
    echo "$CARD doesn't look like a ticket number" >&2
    return 1
  fi

  open "https://$JIRA_SUBDOMAIN.atlassian.net/browse/$CARD"
}

# Shortcut for looking at cloudwatch logs, selecting streams interactively with fzf
logs() {
  "$HOME/scripts/aws/logs" "$@"
}

# Fullscreen mplayer
alias mp='mplayer -geometry 0%:100%'

# Quickly look at recent vim notes
alias notes='vim -c RecentNotes'

alias ubuntu='docker run --rm -it -w /mnt -v $(pwd):/mnt ubuntu:latest /bin/bash'

# Vim modes
alias vim-json='vim -c "set filetype=json"'
alias vim-log='vim -c "color oceandeep" -c "AnsiEsc"'
alias vim-midnight='vim -c "color midnight"'
alias vim-ocean='vim -c "color oceandeep"'
alias viml=vim-log

###

# AWS tooling

# Connect to an EC2 instance
conn() {
  ~/scripts/aws/ec2_connect.py "$@"
}

# List EC2 instances
ec2() {
  ~/scripts/aws/find_ec2.py "$@"
}

# Log into AWS ECR
ecr() {
  if [[ "$AWS_ECR_ACCOUNT" == '' ]]; then
    echo 'You need to set $AWS_ECR_ACCOUNT in your environment to use this shortcut.' >&2
    echo 'This should be in a format like <account_id>.dkr.ecr.<region>.amazonaws.com' >&2
    return 1
  fi
  aws ecr get-login-password | docker login --username AWS --password-stdin "$AWS_ECR_ACCOUNT"
}

# ---------------------------------------------------------------------

# ENVIRONMENT-SPECIFIC ALIASES ----------------------------------------

# Linux-specific aliases
if [[ ! -d /Library ]]; then
  unalias ls &> /dev/null
  unalias which &> /dev/null
  alias ls='ls --color=auto'
  alias which='(alias; declare -f) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot'

  alias open=xdg-open
fi

# ---------------------------------------------------------------------

# Import other useful files
{
  . ~/.env
  . ~/.passwords
  . ~/.prettify
  . ~/.bashrc_venv
  . ~/.work
  . ~/.aliases
  . ~/.cargo/env
  . ~/.nix-profile/etc/profile.d/nix.sh
} &> /dev/null
