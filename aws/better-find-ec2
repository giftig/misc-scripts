#!/usr/bin/python3

import argparse
import datetime
import json
import os

import boto3


def serialise_json(obj: any) -> str:
    """Serialiser for non-serialisable types"""
    if isinstance(obj, datetime.datetime):
        return obj.isoformat()

    raise ValueError(f"Don't know how to serialise {obj}, type {type(obj)}")


def filter_by_name(instances, pattern):
    return [i for i in instances if pattern in i[""]]


class Ec2Instance:
    def __init__(self, data):
        self.data = data

        self.name = None

        tags = data.get("Tags", [])
        for t in tags:
            if t["Key"] == "Name":
                self.name = t["Value"]

        self.instance_id = data["InstanceId"]
        self.launch_time = datetime.datetime.fromisoformat(data["LaunchTime"])
        self.state = data["State"]["Name"]
        self.private_ip = data.get("PrivateIpAddress")
        self.public_ip = data.get("PublicIpAddress")

    def __str__(self):
        return f"{self.name}\t{self.private_ip}\t{self.instance_id}"


class Ec2InstanceFinder:
    tmp_dir = "/tmp"

    def __init__(self, use_cache=True):
        self.ec2 = boto3.client("ec2")
        self.session = boto3.Session()
        self.use_cache = True

    @property
    def cache_key(self) -> str:
        access_key = os.environ.get("AWS_ACCESS_KEY_ID", "defaultaccesskey")
        profile = self.session.profile_name or "default-profile"
        today = datetime.datetime.today().strftime("%Y-%m-%d")

        return (
            f"find-ec2-results-py-{access_key}-{profile}-{today}.json"
        )

    @property
    def cache_file(self) -> str:
        return os.path.join(self.tmp_dir, self.cache_key)

    def write_cache(self, data):
        with open(self.cache_file, "w") as f:
            json.dump(data, f, default=serialise_json)

    def read_cache(self):
        if not os.path.isfile(self.cache_file):
            return None

        with open(self.cache_file, "r") as f:
            return json.load(f)

    def get_results(self):
        if self.use_cache:
            data = self.read_cache()

            if data is not None:
                self.data = data
                return self.data

        response = self.ec2.describe_instances()

        # Pass the data in and out of the cache first as we will lose type
        # information for datetimes when we serialise it, so this makes sure
        # we have it in a consistent format
        self.write_cache(response)
        self.data = self.read_cache()

        return self.data

    def get_all_instances(self):
        results = self.get_results()
        return [
            Ec2Instance(i)
            for r in results["Reservations"] for i in r["Instances"]
        ]


def main():
    parser = argparse.ArgumentParser("find-ec2")
    parser.add_argument("-C", action="store_false", dest="use_cache")
    parser.add_argument("pattern", nargs="?")

    args = parser.parse_args()

    finder = Ec2InstanceFinder(use_cache=args.use_cache)
    instances = finder.get_all_instances()

    if args.pattern:
        instances = [i for i in instances if i.name and args.pattern in i.name]

    for instance in instances:
        print(instance)


if __name__ == "__main__":
    main()
