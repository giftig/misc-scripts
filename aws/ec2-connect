#!/bin/bash

# Uses find-ec2 to create a list of known hosts, optionallty filtered,
# and then use fzf to provide a nice interface for selecting the one we
# want to connect to and setting your remote PS1 to a nice coloured
# representation of which host you're on.

# Some things are very specific to where I keep my keys, what my instance
# naming convention is like, etc., so if you want to use this in different
# contexts I've tried to segregate them so that you can provide your own
# implementations (including noop implementations by defining the following
# scriptlets:
# - ~/.ec2-connect/remote-ps1.sh

cd $(dirname $0)

YELLOW=$(tput setaf 3)
CYAN=$(tput setaf 6)
GREY=$(tput setaf 8)
RESET=$(tput sgr0)

CACHE_ARG=''
FILTER_TERM=''
TASK='_conn'

SSH_USER=ec2-user
KEY="${EC2_CONNECT_DEFAULT_KEY:-$HOME/.ssh/id_rsa}"
FIND_FORMAT=default

REMOTE_PS1_SCRIPT="$HOME/.ec2-connect/remote-ps1.sh"

usage() {
  echo 'Usage: ec2-connect [-C] [FILTER]'
  echo '       ec2-connect --scp [-C] [FILTER]'
  echo ''
  echo 'Options:'
  echo ''
  echo '-C        Tell the underlying find-ec2 script to skip the cache'
  echo '--key     Use the specified SSH key.'
  echo '--user    Use the specified user.'
  echo '--scp     Instead of connecting to the host, print an scp command'
  echo '          which can easily be used to copy files to/from the host'
  echo '--public  Find public IPs to connect to rather than private ones'
  echo ''
  echo 'FILTER    Filter instances by this term before presenting choices.'
  echo '          If there is exactly one match for the term it will be '
  echo '          picked automatically'
}

_print_scp() {
  echo 'scp -i "'"$KEY"'" $LOCAL_FILE "'"$SSH_USER@$IP:~"'"'
}

_conn() {
  # Default remote PS1 prefixes the instance name in cyan and then provides a yellow $ prompt
  # To set your own, create an executable $REMOTE_PS1_SCRIPT which takes the instance name as an
  # argument and writes the expected PS1 line to stdout
  local OVERRIDE_PS1="\[$CYAN\]$INSTANCE_NAME\[$RESET\] \W \[$YELLOW\]\\$\[$RESET\] "
  if [[ -f "$REMOTE_PS1_SCRIPT" ]]; then
    OVERRIDE_PS1=$("$REMOTE_PS1_SCRIPT" "$INSTANCE_NAME")
  fi

  # Stick my PS1 override into a bashrc and start a shell using that one
  LAUNCH_CMD="cp ~/.bashrc ~/.bashrc.n && echo 'export PS1="'"'"$OVERRIDE_PS1"'"'"' >> ~/.bashrc.n; bash --rcfile ~/.bashrc.n"
  echo "${YELLOW}Connecting to instance $INSTANCE_NAME ($IP)$RESET"

  ssh -t -i "$KEY" "$SSH_USER@$IP" "$LAUNCH_CMD"
}

while [[ "$#" != 0 ]]; do
  case "$1" in
    -C|--no-cache)
      CACHE_ARG='-C'
      shift
      ;;
    -k|--key)
      shift
      KEY="$1"
      shift
      ;;
    --scp)
      TASK='_print_scp'
      shift
      ;;
    -u|--user)
      shift
      SSH_USER="$1"
      shift
      ;;
    -p|--pub|--public)
      shift
      FIND_FORMAT=pubip
      ;;
    --help)
      usage
      exit 0
      ;;
    -*)
      usage >&2
      exit 1
      ;;
    *)
      if [[ "$FILTER_TERM" != '' ]]; then
        usage >&2
        exit 2
      fi

      FILTER_TERM="$1"
      shift
      ;;
  esac
done

IP_PATTERN='([0-9]{1,3}\.){3}[0-9]{1,3}'

if ! which fzf &> /dev/null; then
  echo 'Please install fzf to use this script'
  exit 1
fi

ENTRY=$(
  ./find-ec2 "$CACHE_ARG" -p '| .[0] + " " + .[1] + " " + .[2]' -f "$FIND_FORMAT" "$FILTER_TERM" 2> /dev/null |
    grep -E "$IP_PATTERN" |
    fzf --ansi -i -0 -1 +m --prompt='Select host: ' |
    tr -s ' '
)

if [[ "$ENTRY" == '' ]]; then
  echo 'No results' >&2
  exit 1
fi

INSTANCE_NAME=$(echo "$ENTRY" | cut -d ' ' -f 1)
IP=$(echo "$ENTRY" | cut -d ' ' -f 2)

$TASK
