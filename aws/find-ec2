#!/bin/bash

SEARCH_TERM=''

FORMAT='default'
OVERRIDE_FORMAT=0
PRESENTATION='| .[0] + "\t" + .[1] + "\t" + .[2]'
CACHE_FILE="/tmp/find-ec2-results-${AWS_ACCESS_KEY_ID:-defaultaccesskey}-${AWS_PROFILE:-defaultprofile}-$(date +'%Y-%m-%d').json"
USE_CACHE=1

usage() {
  echo 'Usage: find-ec2 [-f FORMAT] [-p PRESENTATION] [-C] [SEARCH_TERM]'
  echo ''
  echo 'Options:'
  echo ''
  echo 'FORMAT          How to format the resulting information using jq to reduce it to useful info'
  echo 'PRESENTATION    How to write that collected information'
  echo 'SEARCH_TERM     Search term matching partial instance names (Name tag)'
  echo ''
  echo '-C              Do not use cached results (results will be cached for the day otherwise)'
  echo ''
  echo 'The default is to write tsv with instance names, IPs, and IDs'
}

describe_instances() {
  if [[ "$USE_CACHE" == 0 || ! -f "$CACHE_FILE" ]]; then
    aws ec2 describe-instances > "$CACHE_FILE"
  fi

  cat "$CACHE_FILE"
}


while [[ "$#" != 0 ]]; do
  case "$1" in
    -f|--format)
      shift
      FORMAT="$1"
      shift
      ;;
    -p|--presentation)
      shift
      PRESENTATION="$1"
      shift
      ;;
    -c|--cache)
      shift
      USE_CACHE=1
      ;;
    -C|--no-cache)
      shift
      USE_CACHE=0
      ;;
    -*)
      echo "Unknown flag $1" >&2
      usage >&2
      exit 1
      ;;
    *)
      if [[ "$SEARCH_TERM" != '' ]]; then
        usage >&2
        exit 2
      fi

      SEARCH_TERM="$1"
      shift
      ;;
  esac
done

# Predefined formats for ease of use
case $FORMAT in
  default)
    IP_OPTIONS='.PrivateIpAddress'
    ;;
  pub|public|pubip|public_ip)
    IP_OPTIONS='.PublicIpAddress'
    ;;
  allips)
    IP_OPTIONS='.PublicIpAddress, .PrivateIpAddress'
    ;;
  *)
    OVERRIDE_FORMAT=1
    ;;
esac

if [[ "$OVERRIDE_FORMAT" == 0 ]]; then
  FORMAT='.Reservations | map(.Instances) | .[] | map([((.Tags // [])[] | select(.Key == "Name") | .Value) // "(no name)", '"$IP_OPTIONS"', .InstanceId]) | .[]'
fi

describe_instances |
  jq -r "$FORMAT $PRESENTATION" |
  fgrep "$SEARCH_TERM" |
  sort
